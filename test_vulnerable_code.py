#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —É—è–∑–≤–∏–º–æ—Å—Ç—è–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã Security Tools MCP Agent
"""

import os
import subprocess
import sqlite3
import hashlib
import pickle
import yaml
import requests

# üö® HARDCODED SECRETS - –¥–ª—è detect_secrets
DATABASE_PASSWORD = "super_secret_password_123"
API_KEY = "sk-1234567890abcdef1234567890abcdef"
PRIVATE_KEY = """-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEA4f5wg5l2hKsTeNem/V41fGnJm6gOdrj8ym3rFkEjWT2btnjx
-----END RSA PRIVATE KEY-----"""

# üö® SQL INJECTION - –¥–ª—è bandit –∏ semgrep
def unsafe_database_query(user_input):
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    # –£—è–∑–≤–∏–º—ã–π SQL –∑–∞–ø—Ä–æ—Å
    query = f"SELECT * FROM users WHERE username = '{user_input}'"
    cursor.execute(query)
    return cursor.fetchall()

# üö® COMMAND INJECTION - –¥–ª—è bandit –∏ semgrep  
def unsafe_system_command(filename):
    # –ü—Ä—è–º–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –≤–≤–æ–¥–æ–º
    os.system(f"cat {filename}")
    subprocess.call(f"ls -la {filename}", shell=True)

# üö® INSECURE DESERIALIZATION - –¥–ª—è bandit
def unsafe_pickle_load(data):
    return pickle.loads(data)

# üö® WEAK CRYPTOGRAPHY - –¥–ª—è bandit
def weak_hash(password):
    return hashlib.md5(password.encode()).hexdigest()

# üö® YAML LOAD VULNERABILITY - –¥–ª—è bandit
def unsafe_yaml_load(yaml_string):
    return yaml.load(yaml_string, Loader=yaml.Loader)

# üö® INSECURE HTTP REQUESTS - –¥–ª—è bandit –∏ semgrep
def insecure_http_request(url):
    # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL
    response = requests.get(url, verify=False)
    return response.text

# üö® PATH TRAVERSAL - –¥–ª—è semgrep
def unsafe_file_read(filename):
    with open(f"/var/www/uploads/{filename}", 'r') as f:
        return f.read()

# üö® XSS VULNERABILITY - –¥–ª—è semgrep
def unsafe_html_render(user_input):
    html = f"<div>Hello {user_input}</div>"
    return html

# üö® RANDOM NUMBER GENERATION - –¥–ª—è bandit
import random
def weak_random():
    return random.random()

# üö® INSECURE TEMP FILE - –¥–ª—è bandit
import tempfile
def insecure_temp_file():
    temp = tempfile.mktemp()
    with open(temp, 'w') as f:
        f.write("sensitive data")

# üö® DEBUG MODE IN PRODUCTION - –¥–ª—è circle_test
DEBUG = True
SECRET_KEY = "development_key_not_for_prod"

# üö® TODO IN PRODUCTION CODE - –¥–ª—è circle_test
def process_payment(amount):
    # TODO: implement proper validation
    return True

# üö® HARDCODED IP ADDRESSES - –¥–ª—è circle_test
PRODUCTION_SERVER = "192.168.1.100"
DATABASE_HOST = "10.0.0.5"

if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
    print("üî• Running vulnerable code examples...")
    
    # SQL Injection
    result = unsafe_database_query("admin' OR '1'='1")
    
    # Command Injection
    unsafe_system_command("../../etc/passwd")
    
    # Weak cryptography
    weak_password_hash = weak_hash("password123")
    
    # Insecure HTTP request
    try:
        insecure_http_request("https://example.com")
    except:
        pass
    
    print("‚úÖ Vulnerable code execution completed") 