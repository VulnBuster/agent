#!/bin/bash

# Security Tools MCP Agent - Launcher Script
# –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ MCP —Å–µ—Ä–≤–µ—Ä—ã –∏ –≥–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LOGS_DIR="$SCRIPT_DIR/logs"
PIDS_FILE="$SCRIPT_DIR/.pids"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
mkdir -p "$LOGS_DIR"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] ERROR:${NC} $1"
}

warn() {
    echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] WARNING:${NC} $1"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞
start_mcp_server() {
    local name="$1"
    local port="$2"
    local script_path="$3"
    
    log "üöÄ Starting $name MCP Server on port $port..."
    
    cd "$(dirname "$script_path")"
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
    source "$SCRIPT_DIR/venv/bin/activate" && python "$script_path" > "$LOGS_DIR/$name.log" 2>&1 &
    local pid=$!
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º PID –≤ —Ñ–∞–π–ª
    echo "$name:$pid" >> "$PIDS_FILE"
    
    log "‚úÖ $name started with PID $pid, logs: $LOGS_DIR/$name.log"
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    cd "$SCRIPT_DIR"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
check_port() {
    local port="$1"
    local max_attempts=30
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if curl -s "http://localhost:$port/health" > /dev/null 2>&1; then
            return 0
        fi
        sleep 1
        ((attempt++))
    done
    return 1
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã
if [ -f "$PIDS_FILE" ]; then
    error "–°–µ—Ä–≤–∏—Å—ã —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ ./stop.sh"
    exit 1
fi

# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª PID
: > "$PIDS_FILE"

log "üéØ Starting Security Tools MCP Agent..."

# 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
log "üîç Checking dependencies..."

if ! command -v python3 &> /dev/null; then
    error "Python3 not found. Please install Python 3.11+"
    exit 1
fi

if ! command -v npx &> /dev/null; then
    error "npx not found. Please install Node.js"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
if [ ! -d "venv" ]; then
    log "üî® Creating virtual environment..."
    python3 -m venv venv
fi

# –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º Gradio
source venv/bin/activate
if ! python -c "import gradio" &> /dev/null; then
    warn "Gradio not found. Installing requirements..."
    pip install -r gradio-app/requirements.txt
fi

log "‚úÖ Dependencies OK"

# 2. –ó–∞–ø—É—Å–∫–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä—ã
log "üöÄ Starting MCP Servers..."

start_mcp_server "bandit" "7861" "$SCRIPT_DIR/mcp/mcp-bandit/app.py"
start_mcp_server "detect-secrets" "7862" "$SCRIPT_DIR/mcp/mcp-detect_secrets/app.py"  
start_mcp_server "pip-audit" "7863" "$SCRIPT_DIR/mcp/mcp-pip_audit/app.py"
start_mcp_server "circle-test" "7864" "$SCRIPT_DIR/mcp/mcp-circle_test/app.py"
start_mcp_server "semgrep" "7865" "$SCRIPT_DIR/mcp/mcp-semgrep/app.py"

# 3. –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤
log "‚è≥ Waiting for MCP servers to be ready..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–µ—Ä
servers=("bandit:7861" "detect-secrets:7862" "pip-audit:7863" "circle-test:7864" "semgrep:7865")

for server_port in "${servers[@]}"; do
    IFS=':' read -r server port <<< "$server_port"
    log "‚è≥ Checking $server on port $port..."
    
    if check_port "$port"; then
        log "‚úÖ $server is ready on port $port"
    else
        error "‚ùå $server failed to start on port $port"
        log "üìã Checking logs..."
        tail -10 "$LOGS_DIR/$server.log"
        ./stop.sh
        exit 1
    fi
done

# 4. –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
log "üéØ Starting main Gradio application..."

cd "$SCRIPT_DIR/gradio-app"
source "$SCRIPT_DIR/venv/bin/activate" && python app.py > "$LOGS_DIR/gradio-app.log" 2>&1 &
main_pid=$!
echo "gradio-app:$main_pid" >> "$PIDS_FILE"

log "‚úÖ Main application started with PID $main_pid"

# 5. –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
log "‚è≥ Waiting for main application..."

if check_port "7860"; then
    log "‚úÖ Main application is ready on port 7860"
else
    error "‚ùå Main application failed to start"
    ./stop.sh
    exit 1
fi

# 6. –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
log ""
log "üéâ Security Tools MCP Agent is ready!"
log ""
log "üåê Web Interface: http://localhost:7860"
log "üìä MCP Servers:"
log "   ‚Ä¢ Bandit (Python security): http://localhost:7861"
log "   ‚Ä¢ Detect-Secrets: http://localhost:7862"
log "   ‚Ä¢ Pip-Audit: http://localhost:7863"
log "   ‚Ä¢ Circle-Test: http://localhost:7864"
log "   ‚Ä¢ Semgrep: http://localhost:7865"
log ""
log "üìã Logs directory: $LOGS_DIR"
log "üõë To stop all services: ./stop.sh"
log "üìä To view logs: ./logs.sh"
log ""
log "‚ú® Happy security scanning!" 