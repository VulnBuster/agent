#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç MCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
"""

import asyncio
import aiohttp
import subprocess
import sys

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
MCP_SERVERS = {
    "bandit": {
        "port": 7861,
        "url": "http://mcp-bandit:7860/gradio_api/mcp/sse",
        "description": "Python code security analysis"
    },
    "detect_secrets": {
        "port": 7862,
        "url": "http://mcp-detect-secrets:7860/gradio_api/mcp/sse",
        "description": "Secret detection in code"
    },
    "pip_audit": {
        "port": 7863,
        "url": "http://mcp-pip-audit:7860/gradio_api/mcp/sse",
        "description": "Python package vulnerability scanning"
    },
    "circle_test": {
        "port": 7864,
        "url": "http://mcp-circle-test:7860/gradio_api/mcp/sse",
        "description": "Security policy compliance checking"
    },
    "semgrep": {
        "port": 7865,
        "url": "http://mcp-semgrep:7860/gradio_api/mcp/sse",
        "description": "Advanced static code analysis"
    }
}

async def test_http_connection(server_name, port):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç HTTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
    try:
        timeout = aiohttp.ClientTimeout(total=3)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(f"http://localhost:{port}") as response:
                if response.status == 200:
                    return True, "HTTP OK"
                else:
                    return False, f"HTTP {response.status}"
    except Exception as e:
        return False, f"HTTP failed: {str(e)}"

async def test_mcp_remote():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å mcp-remote"""
    try:
        result = subprocess.run(
            ["mcp-remote", "--help"], 
            capture_output=True, 
            text=True, 
            timeout=5
        )
        if result.returncode == 0:
            return True, "mcp-remote available"
        else:
            return False, "mcp-remote not found"
    except subprocess.TimeoutExpired:
        return False, "mcp-remote timeout"
    except FileNotFoundError:
        return False, "mcp-remote not installed"
    except Exception as e:
        return False, f"mcp-remote error: {str(e)}"

async def main():
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
    print("="*50)
    
    # –¢–µ—Å—Ç mcp-remote
    print("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ mcp-remote...")
    mcp_available, mcp_msg = await test_mcp_remote()
    print(f"   {'‚úÖ' if mcp_available else '‚ùå'} {mcp_msg}")
    
    if not mcp_available:
        print("\n‚ùå mcp-remote –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π:")
        print("   npm install -g mcp-remote")
        return
    
    print("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
    all_ok = True
    
    # –¢–µ—Å—Ç HTTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    for server_name, config in MCP_SERVERS.items():
        http_ok, http_msg = await test_http_connection(server_name, config["port"])
        status = "‚úÖ" if http_ok else "‚ùå"
        print(f"   {status} {server_name:15} (:{config['port']}) - {http_msg}")
        
        if not http_ok:
            all_ok = False
    
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    if all_ok:
        print("‚úÖ –í—Å–µ MCP —Å–µ—Ä–≤–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã!")
        print("üöÄ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ MCP —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:")
        print("   docker compose ps")
        print("   docker compose logs")

if __name__ == "__main__":
    asyncio.run(main()) 