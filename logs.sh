#!/bin/bash

# Security Tools MCP Agent - Logs Viewer
# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LOGS_DIR="$SCRIPT_DIR/logs"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] ERROR:${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤
if [ ! -d "$LOGS_DIR" ]; then
    error "Logs directory not found: $LOGS_DIR"
    exit 1
fi

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ª–æ–≥–æ–≤ —Å–µ—Ä–≤–∏—Å–∞
show_service_logs() {
    local service="$1"
    local log_file="$LOGS_DIR/$service.log"
    
    echo -e "\n${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${BLUE}üîç LOGS: $service${NC}"
    echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    
    if [ -f "$log_file" ]; then
        echo -e "${YELLOW}üìÑ File: $log_file${NC}"
        echo -e "${YELLOW}üìä Size: $(du -h "$log_file" | cut -f1)${NC}"
        echo -e "${YELLOW}üïí Modified: $(stat -f "%Sm" -t "%Y-%m-%d %H:%M:%S" "$log_file" 2>/dev/null || date -r "$log_file" 2>/dev/null)${NC}"
        echo ""
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫
        tail -50 "$log_file"
    else
        error "Log file not found: $log_file"
    fi
}

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å
if [ $# -eq 0 ]; then
    log "üìã Security Tools MCP Agent - Logs"
    log ""
    log "üìÇ Logs directory: $LOGS_DIR"
    log ""
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    services=("gradio-app" "bandit" "detect-secrets" "pip-audit" "circle-test" "semgrep")
    
    echo -e "${BLUE}Available services:${NC}"
    for i in "${!services[@]}"; do
        service="${services[$i]}"
        log_file="$LOGS_DIR/$service.log"
        if [ -f "$log_file" ]; then
            size=$(du -h "$log_file" | cut -f1)
            echo -e "  ${GREEN}$((i+1)). $service${NC} (${size})"
        else
            echo -e "  ${RED}$((i+1)). $service${NC} (no log)"
        fi
    done
    
    echo ""
    echo -e "${YELLOW}Usage:${NC}"
    echo -e "  ./logs.sh                    - Show this menu"
    echo -e "  ./logs.sh <service>          - Show logs for specific service"
    echo -e "  ./logs.sh all                - Show logs for all services"
    echo -e "  ./logs.sh follow <service>   - Follow logs for specific service"
    echo ""
    echo -e "${YELLOW}Examples:${NC}"
    echo -e "  ./logs.sh gradio-app"
    echo -e "  ./logs.sh bandit"
    echo -e "  ./logs.sh all"
    echo -e "  ./logs.sh follow gradio-app"
    
elif [ "$1" = "all" ]; then
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ª–æ–≥–∏
    services=("gradio-app" "bandit" "detect-secrets" "pip-audit" "circle-test" "semgrep")
    
    for service in "${services[@]}"; do
        show_service_logs "$service"
    done
    
elif [ "$1" = "follow" ] && [ -n "$2" ]; then
    # –°–ª–µ–¥–∏–º –∑–∞ –ª–æ–≥–∞–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    service="$2"
    log_file="$LOGS_DIR/$service.log"
    
    if [ -f "$log_file" ]; then
        log "üëÄ Following logs for $service (Ctrl+C to stop)"
        echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
        tail -f "$log_file"
    else
        error "Log file not found: $log_file"
        exit 1
    fi
    
elif [ -n "$1" ]; then
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    service="$1"
    show_service_logs "$service"
    
else
    error "Invalid usage. Run './logs.sh' for help."
    exit 1
fi 