version: '3.8'

services:
  # Main Gradio Application
  gradio-app:
    build:
      context: ./gradio-app
      dockerfile: Dockerfile
    ports:
      - "7860:7860"
    env_file:
      - .env
    environment:
      - MCP_BANDIT_URL=http://mcp-bandit:7861/gradio_api/mcp/sse
      - MCP_DETECT_SECRETS_URL=http://mcp-detect-secrets:7862/gradio_api/mcp/sse
      - MCP_PIP_AUDIT_URL=http://mcp-pip-audit:7863/gradio_api/mcp/sse
      - MCP_CIRCLE_TEST_URL=http://mcp-circle-test:7864/gradio_api/mcp/sse
      - MCP_SEMGREP_URL=http://mcp-semgrep:7865/gradio_api/mcp/sse
    depends_on:
      - mcp-bandit
      - mcp-detect-secrets
      - mcp-pip-audit
      - mcp-circle-test
      - mcp-semgrep
    networks:
      - mcp-network
    restart: unless-stopped

  # Bandit MCP Server
  mcp-bandit:
    build:
      context: ./mcp/mcp-bandit
      dockerfile: ../Dockerfile
    ports:
      - "7861:7860"
    networks:
      - mcp-network
    restart: unless-stopped

  # Detect-Secrets MCP Server
  mcp-detect-secrets:
    build:
      context: ./mcp/mcp-detect_secrets
      dockerfile: ../Dockerfile
    ports:
      - "7862:7860"
    networks:
      - mcp-network
    restart: unless-stopped

  # Pip-Audit MCP Server
  mcp-pip-audit:
    build:
      context: ./mcp/mcp-pip_audit
      dockerfile: ../Dockerfile
    ports:
      - "7863:7860"
    networks:
      - mcp-network
    restart: unless-stopped

  # Circle-Test MCP Server
  mcp-circle-test:
    build:
      context: ./mcp/mcp-circle_test
      dockerfile: ../Dockerfile
    ports:
      - "7864:7860"
    env_file:
      - .env
    networks:
      - mcp-network
    restart: unless-stopped

# Semgrep MCP Server (временно отключен)
  mcp-semgrep:
    build:
      context: ./mcp/mcp-semgrep
      dockerfile: ../Dockerfile
    ports:
      - "7865:7860"
    networks:
      - mcp-network
    restart: unless-stopped

networks:
  mcp-network:
    driver: bridge
    name: mcp-security-network

volumes:
  mcp-temp-data:
    driver: local

# Development override (optional)
# Use: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
# For development with volume mounts and debug settings